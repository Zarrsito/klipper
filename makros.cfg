# Makro Collection
# This file provides examples of Klipper G-Code macros.  The snippets
# in this file may be copied into the main printer.cfg file and
# customized.

# See docs/Config_Reference.md for a description of parameters.

######################################################################
# IDEX Related Macros
######################################################################
[save_variables]
filename: ~/DIY_data/config/variables.klip

[gcode_macro USER_VARIABLES]
description: Tool offsets
variable_tool0_x: 0
variable_tool0_y: 0
variable_tool0_z: 0
variable_tool1_x: 0
variable_tool1_y: -0.26
variable_tool1_z: -0.565

gcode:
    M117 ..,| Fertig ist das Mondgesicht (-_-)

[delayed_gcode STARTUP]
initial_duration: 1.0
gcode:
    SAVE_VARIABLE VARIABLE=print0_temp VALUE=0
    SAVE_VARIABLE VARIABLE=preheat0_temp VALUE=0
    SAVE_VARIABLE VARIABLE=pause0_temp VALUE=0
    SAVE_VARIABLE VARIABLE=print1_temp VALUE=0
    SAVE_VARIABLE VARIABLE=preheat1_temp VALUE=0
    SAVE_VARIABLE VARIABLE=pause1_temp VALUE=0
    SAVE_VARIABLE VARIABLE=heatbed_temp VALUE=0
    SAVE_VARIABLE VARIABLE=print_active VALUE=0
    SAVE_VARIABLE VARIABLE=idex_print VALUE=0
    SAVE_VARIABLE VARIABLE=ztilt VALUE=0
    SAVE_VARIABLE VARIABLE=active_extruder VALUE=0
    SAVE_VARIABLE VARIABLE=retract VALUE=0.75
    SAVE_VARIABLE VARIABLE=tool0_x VALUE=0
    SAVE_VARIABLE VARIABLE=tool0_y VALUE=0
    SAVE_VARIABLE VARIABLE=tool0_z VALUE=0
    SAVE_VARIABLE VARIABLE=tool1_x VALUE=0
    SAVE_VARIABLE VARIABLE=tool1_y VALUE=-0.26
    SAVE_VARIABLE VARIABLE=tool1_z VALUE=-0.550
    M117 Drucker Hochgefahren

[delayed_gcode TILT_RESET]
gcode:
    SAVE_VARIABLE VARIABLE=ztilt VALUE=0

[gcode_macro RESET]
gcode:
    SAVE_VARIABLE VARIABLE=print_active VALUE=0
    CANCEL_PRINT_BASE
    BED_MESH_CLEAR
    TURN_OFF_HEATERS

[gcode_macro PRINT_SPEED]
description: Set Print Speeds and save to User Variables
gcode:
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL=750
    SAVE_VARIABLE VARIABLE=decel VALUE=750
    SET_VELOCITY_LIMIT ACCEL=1500
    SAVE_VARIABLE VARIABLE=accel VALUE=1500
    SET_VELOCITY_LIMIT VELOCITY=150
    SAVE_VARIABLE VARIABLE=velocity VALUE=150
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=3
    SAVE_VARIABLE VARIABLE=square VALUE=3

[gcode_macro PID_AUTO_TUNE]
description: Automatically do a PID Tuning to each Heater
gcode:
    M117 Starting PID Auto Tuning all Heaters
    PID_CALIBRATE HEATER=extruder TARGET=250
    PID_CALIBRATE HEATER=extruder1 TARGET=250
    PID_CALIBRATE HEATER=heater_bed TARGET=110


##########################################################
# PRINTER FANS MANAGEMENT
# Redefine G-code command M106 and M107 
##########################################################

[gcode_macro FAN_VARIABLE]
description: Printer Fan Management
gcode:

variable_active_fan: 0

#--- Carriages print cooling FANs ---
variable_fan: 'Linker_Extruder'    # carriage X1
variable_fan1: 'Rechter_Extruder'   # carriage X2
#--- Other user define FANs ---
variable_fan2: 'fan2'     
variable_fan3: 'fan3'
variable_fan4: 'fan4'  
variable_fan5: 'fan5'

[gcode_macro M106]
description: Override "M106" to allow multiple extruders.
gcode:

    {% set fan_vars = printer["gcode_macro FAN_VARIABLE"] %}
    {% set raw_speed = params.S|default(0)|float %}
    {% set fan_speed = (raw_speed / 255.0)|round(2) %}     
        
    {% set target_fan = params.P|default(fan_vars.active_fan)|int %}
    {% set default_fan = ('fan', 'fan1', 'fan2', 'fan3', 'fan4', 'fan5')[target_fan] %}     
    
    {% if target_fan in [0,1] %}
       ### carriages print cooling FAN   
        CARRIAGE_PRINT_FAN SPEED={fan_speed}
    {% else %}
       ### other user define FAN
        SET_FAN_SPEED FAN={default_fan} SPEED={fan_speed}
    {% endif %}
 

[gcode_macro M107]
description: Override "M107" to allow multiple extruders.
gcode:
    M106 S0  
 
[gcode_macro CARRIAGE_PRINT_FAN]
description: Set automatically the print fan speed for dual carriages modes 
gcode:
    {% set fan_vars = printer["gcode_macro FAN_VARIABLE"] %}      
    
    {% if params.SPEED is defined %}
        {% set fan_speed = params.SPEED|float %}
    {% else %}
        ### read print fan speed from active carriage/extruder
        {% set fan_speed = printer["fan_generic " + fan_vars.fan].speed|float %}
        {% set fan1_speed = printer["fan_generic " + fan_vars.fan1].speed|float %}
        {% set fan_speed = [fan_speed, fan1_speed]|max %}
    {% endif %}
        
    {% if fan_vars.active_fan == 0 %}
        ### FAN on carriage X1
        SET_FAN_SPEED FAN={fan_vars.fan} SPEED={fan_speed}
        SET_FAN_SPEED FAN={fan_vars.fan1} SPEED=0
    {% elif fan_vars.active_fan == 1 %}
        ### FAN on carriage X2
        SET_FAN_SPEED FAN={fan_vars.fan} SPEED=0
        SET_FAN_SPEED FAN={fan_vars.fan1} SPEED={fan_speed}
    {% endif %}
      
######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[gcode_macro M600]
description: Filament Change Script
gcode:
    M117 Pause
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(220)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-2 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    RESTORE_GCODE_STATE NAME=M600_state


######################################################################
# Override M117 command with rawparams
######################################################################

# The macro below will override the default M117 command to echo the message.
#
# It uses the rawparams pseudo-variable that contains the full unparsed
# parameters that was passed to the M117 command.
#
# As this can include comments, we are trimming the text when a `;` or `#` is
# found, and escaping any existing `"`

[gcode_macro M117]
rename_existing: M117.1
gcode:
    {% if rawparams %}
      {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
      SET_DISPLAY_TEXT MSG="{escaped_msg}"
      RESPOND TYPE=command MSG="{escaped_msg}"
    {% else %}
      SET_DISPLAY_TEXT
    {% endif %}

# SDCard 'looping' (aka Marlin M808 commands) support
#
# Support SDCard looping
[sdcard_loop]

# 'Marlin' style M808 compatibility macro for SDCard looping
[gcode_macro M808]
gcode:
    {% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}
    {% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}
    {% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}

# Enable object exclusion
[exclude_object]

# Cancel object (aka Marlin/RRF M486 commands) support
[gcode_macro M486]
description: Cancel object Script
gcode:
# Parameters known to M486 are as follows:
#   [C<flag>] Cancel the current object
#   [P<index>] Cancel the object with the given index
#   [S<index>] Set the index of the current object.
#       If the object with the given index has been canceled, this will cause
#       the firmware to skip to the next object. The value -1 is used to
#       indicate something that isn’t an object and shouldn’t be skipped.
#   [T<count>] Reset the state and set the number of objects
#   [U<index>] Un-cancel the object with the given index. This command will be
#       ignored if the object has already been skipped

    {% if 'exclude_object' not in printer %}
      {action_raise_error("[exclude_object] is not enabled")}
    {% endif %}
    {% if 'T' in params %}
      EXCLUDE_OBJECT RESET=1
    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
    {% endif %}
    {% if 'C' in params %}
      EXCLUDE_OBJECT CURRENT=1
    {% endif %}
    {% if 'P' in params %}
      EXCLUDE_OBJECT NAME={params.P}
    {% endif %}
    {% if 'S' in params %}
      {% if params.S == '-1' %}
        {% if printer.exclude_object.current_object %}
          EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
        {% endif %}
      {% else %}
        EXCLUDE_OBJECT_START NAME={params.S}
      {% endif %}
    {% endif %}
    {% if 'U' in params %}
      EXCLUDE_OBJECT RESET=1 NAME={params.U}
    {% endif %}

[gcode_macro PRESENT_PLATE]
description: Present Print Script
gcode:
    {% set svv = printer.save_variables.variables %}
    M117 Präsentiere Druck
    G91
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
    {% else %}
      {% set z_safe = max_z - act_z %}
    {% endif %}
    {% if svv.print_active == 1 %}
      G1 E-{svv.retract} F2100
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe} F900
    {% endif %}
    G90   
    {% set y_posy = printer.toolhead.axis_maximum.y|float - 5.0 %}
    G1 Y{y_posy} F3000
    G1 X117.5 F3000
    
  

[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E20 F75
    G1 E400 F1000
    G1 E100 F250
    RESTORE_GCODE_STATE NAME=__filament__load
  
[gcode_macro UNLOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E-20 F75
    G1 E-100 F250
    G1 E-500 F1000
    RESTORE_GCODE_STATE NAME=__filament__load

[gcode_macro Level]
gcode:
    M117 Heizbettschrauben vermessen...
    SCREWS_TILT_CALCULATE

[gcode_macro G29]
gcode:
    M117 Bettkalibrierung
    BED_MESH_CALIBRATE

# F360 uses M420 to enable bed levelling, we'll treat it like G29.
[gcode_macro M420]
gcode:
    M117 Bettkalibrierung
    BED_MESH_CALIBRATE

[gcode_macro M601]
gcode:
    CHANGE_FILAMENT

[gcode_macro CHANGE_FILAMENT]
gcode:
    M117 Change Filament
    PAUSE
    M117

[gcode_macro AUTO_Z_TILT_ADJUST]
description: Automatically Adjust Z_Tilt
gcode:
    {% set svv = printer.save_variables.variables %}
    {% if not 'xyz' in printer.toolhead.homed_axes %}
      G28
    {% endif %}
    {% if svv.ztilt == 0 %}
      M117 Z-Achsen Nivellieren...
      M117 Erster Durchgang
      Z_TILT_ADJUST
      M117 Zweiter Durchgang
      Z_TILT_ADJUST
      M117 Dritter Durchgang
      Z_TILT_ADJUST
      M117 Vierter Durchgang
      Z_TILT_ADJUST
      SAVE_VARIABLE VARIABLE=ztilt VALUE=1
      M117 Z-Achsen nivelliert & abgespeichert
      UPDATE_DELAYED_GCODE ID=TILT_RESET DURATION=300
      G1 X117.5 Y117.5 Z15 F3000
    {% else %}
      M117 Z-Achsen bereits nivelliert
    {% endif %}

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    {% if not 'xyz' in printer.toolhead.homed_axes %}
      G28
    {% endif %}
     
    G0 X117 Y117 Z20 F10000
    STATUS_READY
    
[gcode_macro G28]
description: Homing Script
# Only home if needed.
rename_existing: G28.1
gcode:
    {% set svv = printer.save_variables.variables %}
    {% if svv.active_extruder == 1 %}
      ACTIVATE_EXTRUDER EXTRUDER=extruder
      SET_DUAL_CARRIAGE CARRIAGE=0
      SAVE_VARIABLE VARIABLE=active_extruder VALUE=0
      M117 Probe ausgewählt
    {% endif %}
    {% if printer.toolhead.homed_axes != "xyz" %}
      M117 Nullpunktkalibrierung
      G28.1
      SAVE_GCODE_STATE NAME=home
    {% else %}
      M117 Nullpunkt bereits kalibriert!
    {% endif %}